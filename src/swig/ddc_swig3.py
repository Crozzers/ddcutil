# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ddc_swig3', [dirname(__file__)])
        except ImportError:
            import _ddc_swig3
            return _ddc_swig3
        if fp is not None:
            try:
                _mod = imp.load_module('_ddc_swig3', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ddc_swig3 = swig_import_helper()
    del swig_import_helper
else:
    import _ddc_swig3
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def ddcs_ddcutil_version_string():
    return _ddc_swig3.ddcs_ddcutil_version_string()
ddcs_ddcutil_version_string = _ddc_swig3.ddcs_ddcutil_version_string

def ddcs_built_with_adl():
    return _ddc_swig3.ddcs_built_with_adl()
ddcs_built_with_adl = _ddc_swig3.ddcs_built_with_adl

def ddcs_built_with_usb():
    return _ddc_swig3.ddcs_built_with_usb()
ddcs_built_with_usb = _ddc_swig3.ddcs_built_with_usb

_ddc_swig3.DDCS_HAS_ADL_swigconstant(_ddc_swig3)
DDCS_HAS_ADL = _ddc_swig3.DDCS_HAS_ADL

_ddc_swig3.DDCS_HAS_USB_swigconstant(_ddc_swig3)
DDCS_HAS_USB = _ddc_swig3.DDCS_HAS_USB

_ddc_swig3.DDCS_HAS_FAILSIM_swigconstant(_ddc_swig3)
DDCS_HAS_FAILSIM = _ddc_swig3.DDCS_HAS_FAILSIM

def ddcs_get_build_options():
    """ddcs_get_build_options() -> FlagsByte"""
    return _ddc_swig3.ddcs_get_build_options()

def ddcs_status_code_name(status_code):
    """ddcs_status_code_name(status_code) -> char *"""
    return _ddc_swig3.ddcs_status_code_name(status_code)

def ddcs_status_code_desc(status_code):
    """ddcs_status_code_desc(status_code) -> char *"""
    return _ddc_swig3.ddcs_status_code_desc(status_code)

_ddc_swig3.DDCS_WRITE_ONLY_TRIES_swigconstant(_ddc_swig3)
DDCS_WRITE_ONLY_TRIES = _ddc_swig3.DDCS_WRITE_ONLY_TRIES

_ddc_swig3.DDCS_WRITE_READ_TRIES_swigconstant(_ddc_swig3)
DDCS_WRITE_READ_TRIES = _ddc_swig3.DDCS_WRITE_READ_TRIES

_ddc_swig3.DDCS_MULTI_PART_TRIES_swigconstant(_ddc_swig3)
DDCS_MULTI_PART_TRIES = _ddc_swig3.DDCS_MULTI_PART_TRIES

def ddcs_get_max_tries(retry_type):
    """ddcs_get_max_tries(retry_type) -> int"""
    return _ddc_swig3.ddcs_get_max_tries(retry_type)

def ddcs_set_max_tries(retry_type, max_tries):
    """ddcs_set_max_tries(retry_type, max_tries) -> DDCA_Status"""
    return _ddc_swig3.ddcs_set_max_tries(retry_type, max_tries)

_ddc_swig3.DDCS_OL_TERSE_swigconstant(_ddc_swig3)
DDCS_OL_TERSE = _ddc_swig3.DDCS_OL_TERSE

_ddc_swig3.DDCS_OL_NORMAL_swigconstant(_ddc_swig3)
DDCS_OL_NORMAL = _ddc_swig3.DDCS_OL_NORMAL

_ddc_swig3.DDCS_OL_VERBOSE_swigconstant(_ddc_swig3)
DDCS_OL_VERBOSE = _ddc_swig3.DDCS_OL_VERBOSE

def ddcs_get_output_level():
    """ddcs_get_output_level() -> DDCA_Output_Level"""
    return _ddc_swig3.ddcs_get_output_level()

def ddcs_set_output_level(newval):
    """ddcs_set_output_level(newval)"""
    return _ddc_swig3.ddcs_set_output_level(newval)

def ddcs_output_level_name(val):
    """ddcs_output_level_name(val) -> char *"""
    return _ddc_swig3.ddcs_output_level_name(val)

def ddcs_enable_report_ddc_errors(onoff):
    """ddcs_enable_report_ddc_errors(onoff)"""
    return _ddc_swig3.ddcs_enable_report_ddc_errors(onoff)

def ddcs_is_report_ddc_errors_enabled():
    """ddcs_is_report_ddc_errors_enabled() -> bool"""
    return _ddc_swig3.ddcs_is_report_ddc_errors_enabled()

def ddcs_create_dispno_display_identifier(dispno):
    """ddcs_create_dispno_display_identifier(dispno) -> DDCS_Display_Identifier_p"""
    return _ddc_swig3.ddcs_create_dispno_display_identifier(dispno)

def ddcs_create_adlno_display_identifier(iAdapterIndex, iDisplayIndex):
    """ddcs_create_adlno_display_identifier(int iAdapterIndex, int iDisplayIndex) -> DDCS_Display_Identifier_p"""
    return _ddc_swig3.ddcs_create_adlno_display_identifier(iAdapterIndex, iDisplayIndex)

def ddcs_create_busno_display_identifier(busno):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_create_busno_display_identifier(busno)

def ddcs_create_mfg_model_sn_display_identifier(mfg_id, model, sn):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_create_mfg_model_sn_display_identifier(mfg_id, model, sn)

def ddcs_create_edid_display_identifier(byte_buffer, bytect):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_create_edid_display_identifier(byte_buffer, bytect)

def ddcs_create_usb_display_identifier(bus, device):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_create_usb_display_identifier(bus, device)

def ddcs_free_display_identifier(ddcs_did):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_free_display_identifier(ddcs_did)

def ddcs_repr_display_identifier(ddcs_did):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_repr_display_identifier(ddcs_did)

def ddcs_get_display_ref(did):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_get_display_ref(did)

def ddcs_free_display_ref(dref):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_free_display_ref(dref)

def ddcs_repr_display_ref(dref):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_repr_display_ref(dref)

def ddcs_report_display_ref(dref, depth):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_report_display_ref(dref, depth)

def ddcs_open_display(dref):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_open_display(dref)

def ddcs_close_display(dh):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_close_display(dh)

def ddcs_repr_display_handle(dh):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_repr_display_handle(dh)

def ddcs_report_active_displays(depth):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_report_active_displays(depth)
class DDCS_MCCS_Version_Spec(_object):
    """sample feature autodoc docstring"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DDCS_MCCS_Version_Spec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DDCS_MCCS_Version_Spec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _ddc_swig3.DDCS_MCCS_Version_Spec_major_set
    __swig_getmethods__["major"] = _ddc_swig3.DDCS_MCCS_Version_Spec_major_get
    if _newclass:
        major = _swig_property(_ddc_swig3.DDCS_MCCS_Version_Spec_major_get, _ddc_swig3.DDCS_MCCS_Version_Spec_major_set)
    __swig_setmethods__["minor"] = _ddc_swig3.DDCS_MCCS_Version_Spec_minor_set
    __swig_getmethods__["minor"] = _ddc_swig3.DDCS_MCCS_Version_Spec_minor_get
    if _newclass:
        minor = _swig_property(_ddc_swig3.DDCS_MCCS_Version_Spec_minor_get, _ddc_swig3.DDCS_MCCS_Version_Spec_minor_set)

    def __init__(self):
        """sample feature autodoc docstring"""
        this = _ddc_swig3.new_DDCS_MCCS_Version_Spec()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ddc_swig3.delete_DDCS_MCCS_Version_Spec
    __del__ = lambda self: None
DDCS_MCCS_Version_Spec_swigregister = _ddc_swig3.DDCS_MCCS_Version_Spec_swigregister
DDCS_MCCS_Version_Spec_swigregister(DDCS_MCCS_Version_Spec)


def ddcs_get_feature_name(feature_code):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_get_feature_name(feature_code)

def ddcs_get_capabilities_string(dh):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_get_capabilities_string(dh)
class DDCS_Non_Table_Value_Response(_object):
    """sample feature autodoc docstring"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DDCS_Non_Table_Value_Response, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DDCS_Non_Table_Value_Response, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mh"] = _ddc_swig3.DDCS_Non_Table_Value_Response_mh_set
    __swig_getmethods__["mh"] = _ddc_swig3.DDCS_Non_Table_Value_Response_mh_get
    if _newclass:
        mh = _swig_property(_ddc_swig3.DDCS_Non_Table_Value_Response_mh_get, _ddc_swig3.DDCS_Non_Table_Value_Response_mh_set)
    __swig_setmethods__["ml"] = _ddc_swig3.DDCS_Non_Table_Value_Response_ml_set
    __swig_getmethods__["ml"] = _ddc_swig3.DDCS_Non_Table_Value_Response_ml_get
    if _newclass:
        ml = _swig_property(_ddc_swig3.DDCS_Non_Table_Value_Response_ml_get, _ddc_swig3.DDCS_Non_Table_Value_Response_ml_set)
    __swig_setmethods__["sh"] = _ddc_swig3.DDCS_Non_Table_Value_Response_sh_set
    __swig_getmethods__["sh"] = _ddc_swig3.DDCS_Non_Table_Value_Response_sh_get
    if _newclass:
        sh = _swig_property(_ddc_swig3.DDCS_Non_Table_Value_Response_sh_get, _ddc_swig3.DDCS_Non_Table_Value_Response_sh_set)
    __swig_setmethods__["sl"] = _ddc_swig3.DDCS_Non_Table_Value_Response_sl_set
    __swig_getmethods__["sl"] = _ddc_swig3.DDCS_Non_Table_Value_Response_sl_get
    if _newclass:
        sl = _swig_property(_ddc_swig3.DDCS_Non_Table_Value_Response_sl_get, _ddc_swig3.DDCS_Non_Table_Value_Response_sl_set)
    __swig_setmethods__["max_value"] = _ddc_swig3.DDCS_Non_Table_Value_Response_max_value_set
    __swig_getmethods__["max_value"] = _ddc_swig3.DDCS_Non_Table_Value_Response_max_value_get
    if _newclass:
        max_value = _swig_property(_ddc_swig3.DDCS_Non_Table_Value_Response_max_value_get, _ddc_swig3.DDCS_Non_Table_Value_Response_max_value_set)
    __swig_setmethods__["cur_value"] = _ddc_swig3.DDCS_Non_Table_Value_Response_cur_value_set
    __swig_getmethods__["cur_value"] = _ddc_swig3.DDCS_Non_Table_Value_Response_cur_value_get
    if _newclass:
        cur_value = _swig_property(_ddc_swig3.DDCS_Non_Table_Value_Response_cur_value_get, _ddc_swig3.DDCS_Non_Table_Value_Response_cur_value_set)

    def __init__(self):
        """sample feature autodoc docstring"""
        this = _ddc_swig3.new_DDCS_Non_Table_Value_Response()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _ddc_swig3.delete_DDCS_Non_Table_Value_Response
    __del__ = lambda self: None
DDCS_Non_Table_Value_Response_swigregister = _ddc_swig3.DDCS_Non_Table_Value_Response_swigregister
DDCS_Non_Table_Value_Response_swigregister(DDCS_Non_Table_Value_Response)


def ddcs_get_nontable_vcp_value(dh, feature_code):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_get_nontable_vcp_value(dh, feature_code)

def ddcs_set_nontable_vcp_value(dh, feature_code, new_value):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_set_nontable_vcp_value(dh, feature_code, new_value)

def ddcs_get_profile_related_values(dh):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_get_profile_related_values(dh)

def ddcs_set_profile_related_values(profile_values_string):
    """sample feature autodoc docstring"""
    return _ddc_swig3.ddcs_set_profile_related_values(profile_values_string)
# This file is compatible with both classic and new-style classes.


