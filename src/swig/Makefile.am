# Adapted from code by tschoonj

generated_source_files =    \
ddc_swig_wrap.c    \
ddc_swig_py
# ddc_swig.pyc       \
# ddc_swig.pyo	
# CLEANFILES = ${generated_source_files}

EXTRA_DIST = ddc_swig.i 

# For some reason, if ddc_swig.py is in CLEANFILES, it is not deleted.   
# Just do the work in clean-local

clean-local:
	@echo "(src/swig/clean-local)"
	@echo "  CLEANFILES = |$(CLEANFILES)|"
	rm -rf ddc_swig_wrap.c ddc_swig.py *.pyc *.pyo


if ENABLE_PYTHON_SWIG

# Python extension module, installed in $(pyexecdir)
pyexec_LTLIBRARIES = _ddc_swig.la

# Corresponding extension module Python file
# Uses pyexec_ prefix so it will be installed in same site-packages exec directory as the extension module
pyexec_PYTHON = ddc_swig.py

# Flags when compiling files in _ddc_swig_la_SOURCES
_ddc_swig_la_CFLAGS = $(PYTHON_CFLAGS) 
_ddc_swig_la_CPPFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/src/public $(PYTHON_CPPFLAGS)
_ddc_swig_la_SOURCES = ddc_swig.c

# Link in the core library
# Any reason to just refer to libddcutil.so instead?
_ddc_swig_la_LIBADD = \
  ../libcommon.la \
  ../libddcutil.la
  
# The source code for the extension module, nodist because this file will be generated by swig
nodist__ddc_swig_la_SOURCES    = ddc_swig_wrap.c

# Global and order-independent shared library and program linker config flags and options 
# -module          forces libtool to generate a dynamically loadable module
# -static          do not link against shared libraries, all external references must be resolved from static libraries
# -shared          create a shared library
# -export-dynamic  add all symbols to dynamic symbol table, needed for dlopen
# -avoid-version   avoid versioning if possible (any effect on Linux?)
# -version-info
#
_ddc_swig_la_LDFLAGS =  
_ddc_swig_la_LDFLAGS +=  -module -shared -export-dynamic -static 
_ddc_swig_la_LDFLAGS += -version-info '@LT_CURRENT@:@LT_REVISION@:@LT_AGE@'


all-local:
	@echo "(src/swig/Makefile) Executing."
	chmod a+x pylocal
	if [ -e _ddc_swig.so ]; then \
	  echo "Link to _ddc_swig.so already exists";\
	else \
	  ln -s .libs/_ddc_swig.so _ddc_swig.so ; \
	fi;


#
# Run swig
#

# For debugging
show_vars:
	@echo "  AM_CFLAGS               = $(AM_CFLAGS)"
	@echo "  AM_CPPFLAGS             = $(AM_CPPFLAGS)"
	@echo "  AX_SWIG_PYTHON_CPPFLAGS = $(AX_SWIG_PYTHON_CPPFLAGS)"
	@echo "  AX_SWIG_PYTHON_LIBS     = $(AX_SWIG_PYTHON_LIBS)"
	@echo "  AX_SWIG_PYTHON_OPT      = $(AX_SWIG_PYTHON_OPT)"
	@echo "  PYTHON_CFLAGS           = $(PYTHON_CFLAGS)"
	@echo "  PYTHON_CPPFLAGS         = $(PYTHON_CPPFLAGS)"
	@echo "  PYTHON_EXEC_PREFIX      = $(PYTHON_EXEC_PREFIX)"
	@echo "  PYTHON_EXTRA_LDFLAGS    = $(PYTHON_EXTRA_LDFLAGS)"
	@echo "  PYTHON_EXTRA_LIBS       = $(PYTHON_EXTRA_LIBS)"
	@echo "  PYTHON_LDFLAGS          = $(PYTHON_LDFLAGS)"
	@echo "  PYTHON_LIBS             = $(PYTHON_LIBS)"
	@echo "  PYTHON_SITE_PKG         = $(PYTHON_SITE_PKG)"
	@echo "  PYTHON_SITE_PKG_EXEC    = $(PYTHON_SITE_PKG_EXEC)"
	@echo "  SWIG                    = $(SWIG) "
	@echo "  SWIG_LIB                = $(SWIG_LIB)"
	@echo "  includedir              = $(includedir)"
	@echo "  prefix                  = $(prefix)"
	@echo "  pyexecdir               = $(pyexecdir)"
	@echo "  pythondir               = $(pythondir)"
	@echo "  srcdir                  = $(srcdir)"
	@echo "  top_srcdir              = $(top_srcdir)"


.PHONY: show_vars


# hack, how to look up compile include directory?   BUT NO LONGER NEEDED 
# swig_incs=-I/usr/lib/gcc/x86_64-linux-gnu/5/include -I/usr/include 
#
# swig/ddct_public_wrap.c: swig/ddct_public.i 
# 	$(swig_var)   -I${top_srcdir} -I/usr/lib/gcc/x86_64-linux-gnu/5/include -I/usr/include -includeall -o swig/ddct_public_wrap.c -python swig/ddct_public.i
	                     
ddc_swig_wrap.c: ddc_swig.i ddc_swig.c ddc_swig.h show_vars  
	@echo ")src/swig/Makefile.am) Executing target ddc_swig_wrap.c"
	$(SWIG)   -I${top_srcdir}/src -I$(top_srcdir)/src/public  -includeall -o ddc_swig_wrap.c -python ddc_swig.i
			     
ddc_swig.py: ddc_swig_wrap.c
	@echo "(src/swig/Makefile.am) Executing target ddc_swig.py"

endif
