/* ddcgt_gocontext.h
 *
 * <copyright>
 * Copyright (C) 2014-2016 Sanford Rockowitz <rockowitz@minsoft.com>
 *
 * Licensed under the GNU General Public License Version 2
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * </endcopyright>
 */

#ifndef DDCGT_CONTEXT_H_
#define DDCGT_CONTEXT_H_

#include <stdbool.h>

#include <glib-object.h>

#include "ddcg_display_ref.h"
// #include <gio/gio.h>


#include "gobject_api/ddcg_types.h"
#include "gobject_api/ddcg_display_identifier.h"

G_BEGIN_DECLS

#ifdef REPLACED_BY_G_DECLARE_FINAL_TYPE
typedef struct _DdcgContext       DdcgContext;
typedef struct _DdcgContextClass  DdcgContextClass;


struct _DdcgContextClass {
   GObjectClass parent_class;
   bool     class_initialized;
};
#endif

#ifdef NO
struct _DdcgContext {
   GObject   parent_instance;
};
#endif


#define DDCG_TYPE_CONTEXT (ddcg_context_get_type())
G_DECLARE_FINAL_TYPE(DdcgContext, ddcg_context, DDCG, CONTEXT, GObject)

// Not needed.  Generated by G_DECLARE_FINAL_TYPE
/*
#define DDCG_CONTEXT(o)           \
   (G_TYPE_CHECK_INSTANCE_CAST ((o), DDCG_TYPE_CONTEXT, DdcgContext))
#define DDCG_CONTEXT_CLASS(k)     \
   (G_TYPE_CHECK_CLASS_CAST((k), DDCG_TYPE_CONTEXT, DdcgContextClass))
#define DDCG_IS_CONTEXT(o)        \
   (G_TYPE_CHECK_INSTANCE_TYPE ((o), DDCG_TYPE_CONTEXT))
#define DDCG_IS_CONTEXT_CLASS(k)  \
   (G_TYPE_CHECK_CLASS_TYPE ((k), DDCG_TYPE_CONTEXT))
#define DDCG_CONTEXT_GET_CLASS(o) \
   (G_TYPE_INSTANCE_GET_CLASS ((o), DDCG_TYPE_CONTEXT, DdcgContextClass))
*/


#define DDCG_CONTEXT_ERROR    (ddcg_context_quark ())
#define DDCG_CONTEXT_TYPE_ERROR  (ddcg_context_get_type ())

DdcgContext * ddcg_context_new(void);



gint32 ddcg_context_get_max_max_tries(
      DdcgContext * ddcg_context);
     //  GError **     error);


DdcgDisplayRef *
ddcg_context_create_display_ref(
      DdcgDisplayIdentifier * ddcg_did,
      GError **               error);

G_END_DECLS

#endif /* DDCGT_CONTEXT_H_ */
