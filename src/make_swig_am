# copied from tschoonj

#python bindings will only be built if all buildtools are available, hence the following automake conditional
if ENABLE_PYTHON
#our python extension module
pyexec_LTLIBRARIES = _ddct_public.la
_ddct_public_la_CFLAGS = $(PYTHON_CFLAGS) -I$(top_srcdir)/include $(PYTHON_CPPFLAGS)

#link to the C-library
_ddct_public_la_LIBADD = \
  libsharedbase.la
  
# The source code for our extensions module
# nodist because this file will be generated by swig
nodist__ddct_public_la_SOURCES = swig/ddct_public_wrap.c
  
# -module          forces libtool to generate a dynamically loadable module
# -static          do not link against static libraries, all external references must be resolved from static libraries
# -shared          create a shared library
# -export-dynamic  add all symbols to dynamic symbol table, needed for dlopen
# -avoid-version   ??
# -module          ??
_ddct_public_la_LDFLAGS = -avoid-version -module -shared -export-dynamic -static
  
#nodist because this file will be generated by swig
nodist_python_PYTHON = ddct_public.py
  
# This line assumes that the swig interface file ddct_public.i is located in the src subdirectory
# ddct_public_wrap.c: $(top_srcdir)/src/ddct_public.i
#
#       $(SWIG) -I${top_srcdir}/include -includeall -o ddct_public_wrap.c -python ${top_srcdir}/src/ddct_public.i
      
# ddct_public.py: ddct_public_wrap.c
      
# hack, how to look up compile include directory? 
swig/ddct_public_wrap.c: swig/ddct_public.i 
	$(swig_var)   -I${top_srcdir} -I/usr/lib/gcc/x86_64-linux-gnu/5/include -I/usr/include -includeall -o swig/ddct_public_wrap.c -python swig/ddct_public.i
	                     
			     
ddct_public.py: swig/ddct_public_wrap.c
			                     
endif

